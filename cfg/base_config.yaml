device_num: 0                      # GPU device number (0 = first GPU)

Environment:                       # Parameters for the environment
  env_core:
    problem_scene: "estate_tax"    # Economic scenario name (e.g., "delayed_retirement", "consumption_tax", "optimal_monetary", "monopoly")
    consumption_tax_rate: 0.0      # Initial consumption tax rate
    estate_tax_rate: 0.0           # Initial estate/inheritance tax rate
    estate_tax_exemption: 13610000 # Estate tax exemption threshold (USD)
    screen: False                  # Whether to render the environment (currently unavailable)
    episode_length: 300            # Number of steps in one episode
    step_cnt: 0                    # Initial step counter

  Entities:
    - entity_name: 'government'    # Government agent parameters
      entity_args:
        params:
          type: "central_bank"     # government type ("tax", "pension", or "central_bank")
          type_list: [ 'tax', 'pension', 'central_bank' ]   # Supported government roles
          tau: 0.263               # Initial HSV tax parameter: average level of marginal income tax. If fiscal government ("tax") is active, actions will override this value.
          xi: 0.049                # Initial HSV tax parameter: slope (progressivity) of income tax schedule. Larger xi â†’ more progressive taxation.
          tau_a: 0.0               # Initial HSV parameter: average level of marginal asset tax
          xi_a: 0.0                # Initial HSV parameter: slope of marginal asset tax schedule
          Gt_prob: 0.189           # Initial ratio of government spending to GDP
          retire_age: 65           # Default statutory retirement age (overridden if pension government is active)
          contribution_rate: 0.08  # Pension contribution rate (employee share of wage)
          pension_growth_rate: 0.01 # Annual growth rate of pension benefits
          base_interest_rate: 0.03 # Central bank base interest rate (overridden if central bank is active)
          reserve_ratio: 0.08      # Central bank reserve requirement ratio
          gov_task: "gdp"          # Optimization objective ("gdp", "gini", "social_welfare", "mean_welfare", "gdp_gini", "pension_gap"). For central bank: inflation stabilization.
          tax_type: "ai_agent"     # Tax agent type ("ai_agent", "us_federal", "saez")
          real_gdp: 254746e8       # Initial real GDP (USD)
          real_debt_rate: 1.2129   # Initial government debt-to-GDP ratio
          real_population: 333428e3 # Initial population size

        tax:
          type: "tax"              # Fiscal authority agent executing tax policy
          action_dim: 5            # Dimension of action space. If firm_n > 1, action_dim expands (gov spending allocated by firm).
          action_space:
            low: -1                # Lower bound for normalized actions. In RL training, constraining policy outputs to (-1, 1) helps stabilize learning.
            high: 1                # Upper bound for normalized actions
            dtype: float32         # Action data type
          initial_action:          # Initial tax policy parameters
            tau: 0.263
            xi: 0.049
            tau_a: 0.0
            xi_a: 0.0
            Gt_prob: 0.189
          real_action_max: [0.6, 2, 0.05, 2.0, 0.6]  # Max real-world values for scaling. Each agent's (real_action_max, real_action_min) defines the meaningful range of actions in real-world terms.
                                                     # After actions enter env.step(), they are automatically scaled and clipped to this range.
          real_action_min: [0.0, 0.0, 0.0, 0.0, 0.0] # Min real-world values for scaling.

        pension:
          type: "pension"          # Pension authority agent
          action_dim: 2            # Dimension of action space
          action_space:
            low: -1                # Lower bound for normalized pension actions
            high: 1                # Upper bound for normalized pension actions
            dtype: float32
          initial_action:          # Initial pension parameters
            retire_age: 67
            contribution_rate: 0.08
            pension_growth_rate: 0.01
          real_action_max: [70, 0.2] # Max values for (retirement age, contribution rate)
          real_action_min: [60, 0.05] # Min values for (retirement age, contribution rate)

        central_bank:
          type: "central_bank"     # Central bank policy agent
          action_dim: 2            # Dimension of action space
          action_space:
            low: -1                # Lower bound for normalized monetary actions
            high: 1                # Upper bound for normalized monetary actions
            dtype: float32
          initial_action:          # Initial monetary policy parameters
            base_interest_rate: 0.03
            reserve_ratio: 0.08
          real_action_max: [0.1, 0.2]   # Max values for (base interest rate, reserve ratio)
          real_action_min: [-0.02, 0.0] # Min values for (base interest rate, reserve ratio)

    - entity_name: 'households'         # Household agents
      entity_args:
        params:
          type: 'ramsey'                # Household type ('ramsey', 'OLG', 'OLG_risk_invest', 'ramsey_risk_invest')
          type_list: [ 'ramsey', 'OLG', 'OLG_risk_invest', 'ramsey_risk_invest' ]  # Supported household models
          households_n: 100             # Number of households
          CRRA: 1                       # Coefficient of relative risk aversion
          IFE: 1                        # Inverse Frisch elasticity
          stock_alpha: 0.1              # Sensitivity coefficient: controls stock price response to buy/sell imbalance
          action_dim: 2                 # Household action dimension
          e_p: 2.2e-6                   # Probability of transitioning from normal to superstar state
          e_q: 0.990                    # Probability of remaining in the current state
          rho_e: 0.982                  # Persistence in state transitions (normal/superstar)
          sigma_e: 0.200                # Volatility of standard normal shocks
          super_e: 504.3                # Labor productivity in superstar state
          at_min: -1e6                  # Minimum asset holdings
          h_max: 2512                   # Maximum annual working hours
          real_action_max: [ 1.0, 1.0 ]   # Max values for (savings share of income, labor share of h_max)
          real_action_min: [ -0.5, 0.0 ]  # Min values for (savings share of income, labor share of h_max)
          action_space:
            low: -1                     # Lower bound for normalized actions
            high: 1                     # Upper bound for normalized actions
            dtype: float32
        OLG:
          birth_rate: 0.011             # Birth rate (e.g., US demographics)
          initial_working_age: 24       # Starting age for new workers

    - entity_name: 'market'             # Firm agents in the market
      entity_args:
        params:
          type: "perfect"               # Market type: 'perfect', 'monopoly', 'monopolistic_competition', 'oligopoly'
          type_list: [ 'perfect', 'monopoly', 'monopolistic_competition', 'oligopoly' ] # Supported market types
          alpha: 0.36                   # Capital share in Cobb-Douglas production
          Z: 1.0                        # Initial productivity level
          sigma_z: 0.0038               # Std. deviation of productivity shocks
          epsilon: 0.5                  # Demand elasticity parameter in CES utility
          real_action_max: [ 1e2, 1e2 ]   # Max values for firm actions (price, wage rate)
          real_action_min: [ 0.0001, 0.0001 ] # Min values for firm actions

        perfect:
          type: "perfect"               # Perfect competition market
          firm_n: 1                     # Number of firms
          action_dim: 0                 # No decision variables in perfect competition
          action_space:
            low: -1.
            high: 1.
            dtype: float32
          initial_action: null
        monopoly:
          type: "monopoly"              # Monopoly market
          action_dim: 2                 # Firm sets price and wage rate
          firm_n: 1                     # One monopolist
          action_space:
            low: -1.
            high: 1.
            dtype: float32
          initial_action:
            price: 1                    # Initial product price
            WageRate: 1                 # Initial wage rate
        monopolistic_competition:
          type: "monopolistic_competition" # Monopolistic competition
          action_dim: 2
          firm_n: 10                    # Number of firms (user-defined)
          action_space:
            low: -1.
            high: 1.
            dtype: float32
          initial_action:
            price: 1
            WageRate: 1
        oligopoly:
          type: "oligopoly"             # Oligopoly market
          action_dim: 2
          firm_n: 2                     # Number of firms (user-defined)
          action_space:
            low: -1.
            high: 1.
            dtype: float32
          initial_action:
            price: 1
            WageRate: 1

    - entity_name: 'bank'               # Bank agent
      entity_args:
        params:
          type: 'non_profit'            # Bank type ('non_profit', 'commercial')
          type_list: [ 'non_profit', 'commercial' ]  # Supported bank types
          n: 1                          # Number of banks
          lending_rate: 0.0345          # Initial loan interest rate
          deposit_rate: 0.0345          # Initial deposit interest rate
          reserve_ratio: 0.1            # Reserve requirement ratio
          base_interest_rate: 0.0345    # Base policy interest rate
          depreciation_rate: 0.06       # Capital depreciation rate
          real_action_max: [ 0.2, 0.1 ]   # Max values for (loan rate, deposit rate)
          real_action_min: [ 0.03, -0.001 ] # Min values for (loan rate, deposit rate)
          action_space:
            low: -1
            high: 1
            dtype: float32
        non_profit:
          type: "non_profit"            # Non-profit bank (fixed rates)
          action_dim: 0
          initial_action: null
        commercial:
          type: "commercial"            # Commercial bank (chooses lending/deposit rates)
          action_dim: 2
          initial_action: [ 0.03, 0.03 ]  # Initial (lending rate, deposit rate)


Trainer:                                # Store parameters related to policy training/testing
  log_std_min: -20                      # Minimum log standard deviation (policy net)
  log_std_max: 2                        # Maximum log standard deviation
  hidden_size: 128                      # Hidden layer size of neural nets
  cuda: False                           # Whether to use CUDA GPU
  q_lr: 3e-4                            # Learning rate for Q-network
  p_lr: 3e-4                            # Learning rate for policy network
  buffer_size: 1e6                      # Replay buffer size
  n_epochs: 1                       # Number of training epochs
  update_cycles: 100                    # Training updates per epoch
  epoch_length: 300                     # Sample Steps per epoch
  display_interval: 1                   # Logging/printing interval
  batch_size: 64                        # Batch size for training
  gamma: 0.975                          # Discount factor for RL
  tau: 0.95                             # Soft update coefficient of DDPG
  eval_episodes: 5                      # Number of evaluation episodes
  init_exploration_steps: 1000          # Steps before training starts (exploration)
  ppo_tau: 0.95                         # PPO smoothing coefficient (GAE Î»)
  ppo_gamma: 0.99                       # PPO discount factor
  eps: 1e-5                             # Small epsilon for numerical stability
  update_epoch: 20                      # PPO update epochs per iteration
  clip: 0.1                             # PPO clipping ratio
  vloss_coef: 0.5                       # Value loss coefficient
  ent_coef: 0.01                        # Entropy regularization coefficient
  max_grad_norm: 0.5                    # Gradient clipping norm
  update_freq: 10                       # Frequency of policy updates
  initial_train: 10                     # Initial training steps
  noise_rate: 0.01                      # Exploration noise rate
  epsilon: 0.1                          # Epsilon-greedy exploration rate
  save_interval: 10                     # Model save interval
  house_alg: "bc"                       # Household agent algorithm
  gov_alg: "rule_based"                 # Government agent algorithm
  firm_alg: "rule_based"                # Firm agent algorithm
  bank_alg: "rule_based"                # Bank agent algorithm
  update_each_epoch: 20                 # Updates per epoch
  seed: 1                               # Random seed
  wandb: False                          # Whether to log with W&B/Swanlab
  test: False                           # Test mode flag
  bc_test: True                         # in agents/behavior_cloning/bc_agent.py. if False, get actions from real data, and trained via BC; if True, get action from trained BC policy.
